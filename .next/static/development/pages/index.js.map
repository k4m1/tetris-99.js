{"version":3,"file":"static/development/pages/index.js","sources":["webpack:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js","webpack:///./pages/index.js"],"sourcesContent":["\n    (window.__NEXT_P=window.__NEXT_P||[]).push([\"/\", function() {\n      var mod = require(\"/Users/bebop/Desktop/GitHub Reasources /websocket-tetris/pages/index.js\")\n      if(module.hot) {\n        module.hot.accept(\"/Users/bebop/Desktop/GitHub Reasources /websocket-tetris/pages/index.js\", function() {\n          if(!next.router.components[\"/\"]) return\n          var updatedPage = require(\"/Users/bebop/Desktop/GitHub Reasources /websocket-tetris/pages/index.js\")\n          next.router.update(\"/\", updatedPage)\n        })\n      }\n      return mod\n    }]);\n  ","// import { createTracing } from \"trace_events\";\n\nconst canvas = document.getElementById('tetris');\nconst context = canvas.getContext('2d');\n\ncontext.scale(20,20);\n\ncontext.fillStyle = '#000';\ncontext.fillRect(0,0, canvas.clientWidth, canvas.height);\n\n\nconst playAreaClear = () => {\n    outer: for (let y = playArea.length -1; y < 0; --y) {\n        for (let x = 0; x < playArea[y].length; ++x) {\n            if (playArea[y][x] === 0) {\n                continue outer;\n            }\n        }\n        const row = playArea.splice(y, 1)[0].fill[0];\n        playArea.unshift(row);\n        ++y;\n    }\n}\n\n\nconst collision = (playArea, player) => {\n    const [m, o] = [player.matrix, player.pos];\n    for (let y = 0; y < m.length; y++) {\n        for (let x = 0; x < m[y].length; x++) {\n            if (m[y][x] !== 0 && (playArea[y + o.y] && playArea[y + o.y][x + o.x]) !== 0) {\n                return true\n\n            }\n        }\n    }\n    return false\n}\n\nconst createMatrix = (width, height) => {\n    const matrix = [];\n    // while height is not 0\n    while (height--) {\n        matrix.push(new Array(width).fill(0));\n    }\n    return matrix\n\n}\n\nconst createTetris = type => {\n    if (type === 'T') {\n        return [\n            [0, 0, 0],\n            [1, 1, 1],\n            [0, 1, 0],\n        ];\n    } else if (type === 'O') {\n        return [\n            [2, 2],\n            [2, 2],\n        ];\n    } else if (type === 'L') {\n        return [\n            [0, 3, 0],\n            [0, 3, 0],\n            [0, 3, 3],\n        ];\n    } else if (type === 'J') {\n        return [\n            [0, 4, 0],\n            [0, 4, 0],\n            [4, 4, 0],\n        ];\n    } else if (type === 'I') {\n        return [\n            [0, 5, 0, 0],\n            [0, 5, 0, 0],\n            [0, 5, 0, 0],\n            [0, 5, 0, 0],\n        ];\n    } else if (type === 'S') {\n        return [\n            [0, 6, 6],\n            [6, 6, 0],\n            [0, 0, 0],\n        ];\n    } else if (type === 'Z') {\n        return [\n            [7, 7, 0],\n            [0, 7, 7],\n            [0, 0, 0],\n        ];\n    }\n}\n\n\nconst draw = () => {\n    context.fillStyle = '#000';\n    context.fillRect(0, 0, canvas.clientWidth, canvas.height);\n    drawMatrix(playArea, {x: 0, y: 0})\n    drawMatrix(player.matrix, player.pos)\n}\n\nconst drawMatrix = (nmatrix, offset) => {\n    \n    matrix.forEach((row, y) => {\n        row.forEach((value, x) => {\n            if (value != 0) {\n                context.fillStyle = colors[value];\n                context.fillRect(x + offset.x, y + offset.y, 1, 1);\n            }\n        });\n    });\n}\n\nconst merge = (playArea, player) => {\n    player.matrix.forEach((row, y) => {\n        row.forEach((value, x) => {\n            if (value !== 0 ) {\n                playArea[y + player.pos.y][x + player.pos.x] = value\n            }\n        })\n    })\n}\n\n\nconst playerDrop = () => {\n    player.pos.y++;\n    if (collision(playArea, player)) {\n        player.pos.y--;\n        merge(playArea, player);\n        playerReset();\n        playAreaClear();\n    }\n    dropCounter = 0;\n}\n\nconst playerMove = direction => {\n    player.pos.x += direction;\n    if (collision(playArea, player)) {\n        player.pos.x -= direction;\n    }\n}\n\nconst playerReset = () => {\n    const tetrises = \"ILJOTSZ\";\n    player.matrix= createTetris(tetrises[tetrises.length * Math.random() | 0]);\n    player.pos.y = 0;\n    player.pos.x = (playArea[0].length / 2 | 0) - (player.matrix[0].length / 2 | 0);\n    if (collision(playArea, player)) {\n        playArea.forEach(row => row.fill(0));\n    }\n}\n\nconst playerRotation = (direction) => {\n    let offset = 1\n    rotate(player.matrix, direction)\n    while (collision(playArea, player)) {\n        player.pos.x += offset;\n        offset = -(offset + (offset > 0 ? 1 : -1));\n        if (offset > player.matrix[0].length) {\n            rotate(player.matrix, -dir);\n            player.pos.x = pos;\n            return;\n        }\n    }\n}\n\n\nconst rotate = (matrix, direction) => {\n    for (let y = 0; y < matrix.length; y++ ) {\n        for (let x = 0; x < y; x++) {\n            [\n                matrix[x][y],\n                matrix[y][x],\n            ] = [\n                matrix[y][x], \n                matrix[x][y],\n            ]\n        }\n    }\n\n    if (direction > 0) {\n        matrix.forEach(row => row.reverse())\n    } else {\n        matrix.reverse();\n    }\n\n}\n\n\nlet dropCounter = 0;\nlet dropInterval = 1000;\n\nlet lastTime = 0\n\nconst update = (time = 0) => {\n    const deltatime = time - lastTime;\n    lastTime = time\n\n    dropCounter += deltatime\n    if (dropCounter > dropInterval) {\n        playerDrop()\n    }\n    draw();\n    requestAnimationFrame(update);\n\n}\n\nconst playArea = createMatrix(12, 20);\n\n\nconst player = {\n    pos: { x: 5, y: 5},\n    matrix: createTetris('T'),\n}\n\n// These event listners will move the player left or right by incremnting the x plane\n// the 'down' control sets our 'dropCounter' to zero which tirggers a 'move' down one position\ndocument.addEventListener('keydown', e => {\n    if (e.keyCode === 37) {\n        playerMovement(-1);\n    } else if (e.keyCode === 39) {\n        playerMovement(1);\n    } else if (e.keyCode === 40) {\n        playerDrop()\n    } else if (e.keyCode === 81) {\n        playerRotation(-1)\n    } else if (e.keyCode === 87) {\n        playerRotation(1)\n    }\n\n})\n\nconst colors = [\nnull,\n'purple',\n'yellow',\n'blue',\n'orange',\n'light blue',\n'green',\n'red'\n]\n\nupdate()\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACZA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AAIA;AACA;AAKA;AACA;AAKA;AACA;AAMA;AACA;AAKA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAWA;;;;;;;;;;;;;;;;A","sourceRoot":""}